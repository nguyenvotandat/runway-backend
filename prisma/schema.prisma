generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brand {
  id        String    @id
  name      String    @unique(map: "Brand_name_key")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  product   product[]
}

model category {
  id        String    @id
  name      String    @unique(map: "Category_name_key")
  slug      String    @unique(map: "Category_slug_key")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  product   product[]
}

model color {
  id             String           @id
  name           String           @unique(map: "Color_name_key")
  hex            String           @db.Char(7)
  productvariant productvariant[]
}

model inventory {
  variantId      String         @id
  quantity       Int            @default(0)
  safetyStock    Int            @default(0)
  updatedAt      DateTime
  productvariant productvariant @relation(fields: [variantId], references: [id], map: "Inventory_variantId_fkey")
}

model price {
  id             String         @id
  variantId      String
  currency       String         @default("USD")
  amount         Decimal        @db.Decimal(10, 2)
  discount       Decimal?       @db.Decimal(10, 2)
  validFrom      DateTime       @default(now())
  validTo        DateTime?
  productvariant productvariant @relation(fields: [variantId], references: [id], map: "Price_variantId_fkey")

  @@index([variantId, validFrom(sort: Desc)], map: "Price_variantId_validFrom_idx")
}

model product {
  id             String           @id
  name           String
  slug           String           @unique(map: "Product_slug_key")
  description    String?
  glbUrl         String?
  ratingAverage  Decimal?         @db.Decimal(3, 2)
  ratingCount    Int              @default(0)
  brandId        String
  categoryId     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  brand          brand            @relation(fields: [brandId], references: [id], map: "Product_brandId_fkey")
  category       category         @relation(fields: [categoryId], references: [id], map: "Product_categoryId_fkey")
  productimage   productimage[]
  producttag     producttag[]
  productvariant productvariant[]
  review         review[]

  @@index([brandId], map: "Product_brandId_fkey")
  @@index([categoryId], map: "Product_categoryId_fkey")
}

model productimage {
  id        String  @id
  url       String
  productId String
  sortOrder Int     @default(0)
  product   product @relation(fields: [productId], references: [id], map: "ProductImage_productId_fkey")

  @@index([productId, sortOrder], map: "ProductImage_productId_sortOrder_idx")
}

model producttag {
  productId String
  tagId     String
  product   product @relation(fields: [productId], references: [id], map: "ProductTag_productId_fkey")
  tag       tag     @relation(fields: [tagId], references: [id], map: "ProductTag_tagId_fkey")

  @@id([productId, tagId])
  @@index([tagId], map: "ProductTag_tagId_idx")
}

model productvariant {
  id        String                @id
  productId String
  colorId   String
  sizeId    String
  sku       String                @unique(map: "ProductVariant_sku_key")
  status    productvariant_status @default(ACTIVE)
  createdAt DateTime              @default(now())
  updatedAt DateTime
  inventory inventory?
  price     price[]
  color     color                 @relation(fields: [colorId], references: [id], map: "ProductVariant_colorId_fkey")
  product   product               @relation(fields: [productId], references: [id], map: "ProductVariant_productId_fkey")
  size      size                  @relation(fields: [sizeId], references: [id], map: "ProductVariant_sizeId_fkey")

  @@index([colorId], map: "ProductVariant_colorId_fkey")
  @@index([productId], map: "ProductVariant_productId_fkey")
  @@index([sizeId], map: "ProductVariant_sizeId_fkey")
}

model review {
  id        String   @id
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   product  @relation(fields: [productId], references: [id], map: "Review_productId_fkey")
  user      user     @relation(fields: [userId], references: [id], map: "Review_userId_fkey")

  @@index([productId, rating], map: "Review_productId_rating_idx")
  @@index([userId], map: "Review_userId_idx")
}

model size {
  id             String           @id
  label          String           @unique(map: "Size_label_key")
  productvariant productvariant[]
}

model tag {
  id         String       @id
  name       String       @unique(map: "Tag_name_key")
  producttag producttag[]
}

model user {
  id        String   @id
  email     String   @unique(map: "User_email_key")
  password  String
  name      String?
  createdAt DateTime @default(now())
  review    review[]
}

enum productvariant_status {
  ACTIVE
  INACTIVE
  ARCHIVED
}
